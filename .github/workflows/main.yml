name: "Publish Project"

on:
  workflow_dispatch:
    inputs:
      dev-deploy:
        type: string
        required: true
  push:
    tags:
      - '*'

env:
  WORKFLOW_NAME: ${{ github.event.pull_request.number || inputs.dev-deploy != null && 'dev-build' || github.ref_name }}
  BUILD_PATH: './build'

concurrency:
  group: $WORKFLOW_NAME
  cancel-in-progress: true

jobs:
  export:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
    container:
      image: barichello/godot-ci:4.3
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Setup node"
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: "Install Requirements"
        run: |
          apt-get update -y && apt-get install -y unzip && apt-get install -y wget && apt-get install -y cpio
          apt install -y npm
          npm i --save wrangler
          mkdir -p $HOME/.local/share/godot/export_templates/4.3.stable
          wget https://github.com/godotengine/godot/releases/download/4.3-stable/Godot_v4.3-stable_export_templates.tpz
          unzip Godot_v4.3-stable_export_templates.tpz -d /tmp
          mv /tmp/templates/* $HOME/.local/share/godot/export_templates/4.3.stable
          
      - name: "Export to HTML5"
        run: | 
          mkdir -v -p ${{ format( '{0}/web', env.BUILD_PATH ) }}
          godot -v --export-release "Web" --rendering-driver opengl3 --headless ${{ format( '{0}/web/index.html', env.BUILD_PATH ) }}
      
      - name: "Export to OSX"
        run: |
          mkdir -v -p ${{ format( '{0}/mac', env.BUILD_PATH ) }}
          godot -v --export-release "Mac OSX" --rendering-driver opengl3 --headless ${{ format( '{0}/mac/macos.zip', env.BUILD_PATH ) }}

      - name: "Export to Windows"
        run: |
          mkdir -v -p ${{ format( '{0}/windows', env.BUILD_PATH ) }}
          godot -v --export-release "Windows Desktop" --rendering-driver opengl3 --headless ${{ format( '{0}/windows/windows.exe', env.BUILD_PATH ) }}

      - name: "Export to X11"
        run: |
          mkdir -v -p ${{ format( '{0}/linux', env.BUILD_PATH ) }}
          godot -v --export-release "Linux/X11" --rendering-driver opengl3 --headless ${{ format( '{0}/linux/linux.x86_64', env.BUILD_PATH ) }}
      
      - name: "Upload Artifacts"
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.WORKFLOW_NAME }}
          path: ${{ env.BUILD_PATH }}
          retention-days: 2

  deploy-to-github-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
    needs: export
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
    
      - name: "Download artifact"
        uses: actions/download-artifact@master
        with:
          name: ${{ env.WORKFLOW_NAME }}
          path: ${{ env.BUILD_PATH }}
      
      - name: "Deploy to GitHub Pages"
        id: github_pages_deploy
        if: ${{ ! endsWith( env.WORKFLOW_NAME, 'dev-build' ) }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ format( '{0}/web', env.BUILD_PATH ) }}
          repository-name: oshawhats-godot-game/oshawhats-godot-game.github.io
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          branch: main
          git-config-name: 'game-builder[bot]'
          git-config-email: 'github-actions[bot]@users.noreply.github.com'
          commit-message: ${{ github.ref_name }}
          clean: true
      
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
    needs: 
    - export
    - deploy-to-github-pages
    #- deploy-to-cloudflare
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
    
      - name: "Download artifact"
        uses: actions/download-artifact@master
        with:
          name: ${{ env.WORKFLOW_NAME }}
          path: ${{ env.BUILD_PATH }}
      
      - name: "Create release"
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ endsWith( env.WORKFLOW_NAME, 'dev-build' ) && format( 'dev-{0}', inputs.dev-deploy ) || github.ref_name }}
          prerelease: ${{ endsWith( env.WORKFLOW_NAME, 'dev-build' ) }}
          files: |
            ${{ format( '{0}/mac/macos.zip', env.BUILD_PATH ) }}
            ${{ format( '{0}/windows/windows.exe', env.BUILD_PATH ) }}
            ${{ format( '{0}/linux/linux.x86_64', env.BUILD_PATH ) }}
          body: "Web build: none, use github."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
